pipeline {
    agent any

    environment {
        SCANNER_HOME = tool 'sonarqube-scanner'
        TERRAFORM_HOME = '/usr/bin/terraform'
        GCP_CREDENTIALS_FILE= 'gcp-service-account-key'
    }
    
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Cloning from GitHub') {
            steps {
                git branch: 'main', credentialsId: 'Github-Token', url: 'https://github.com/Salmamakina/terraform_scripts.git'
            }
        }

        // stage('Download GCP Credentials') {
        //     steps {
        //         script {
        //             // Télécharger le fichier secret de Jenkins et le placer dans un fichier temporaire
        //             withCredentials([file(credentialsId: GCP_CREDENTIALS_FILE, variable: 'GCP_CREDENTIALS_PATH')]) {
        //                 // Le chemin du fichier secret sera accessible via la variable GCP_CREDENTIALS_PATH
        //                 sh 'sudo cp $GCP_CREDENTIALS_PATH /tmp/keplerdatav1.json'
        //             }
        //         }
        //     }
        // }

        // stage('Initialize Terraform') {
        //     steps {
        //         script {
        //             sh '''
        //             set -e
        //             ${TERRAFORM_HOME} init
        //             '''
        //         }
        //     }
        // }

        // stage('Terraform Validate') {
        //     steps {
        //         script {
        //             sh '''
        //             set -e
        //             ${TERRAFORM_HOME} validate
        //             '''
        //         }
        //     }
        // }

        // stage('Terraform Plan') {
        //     steps {
        //         script {
        //             sh '''
        //             set -e
        //             ${TERRAFORM_HOME} plan -var="gcp_credentials=/tmp/keplerdatav1.json"
        //             '''
        //         }
        //     }
        // }

        // stage('Terraform Apply') {
        //     steps {
        //         script {
        //             sh '''
        //             set -e
        //             ${TERRAFORM_HOME} apply -auto-approve -var="gcp_credentials=/tmp/keplerdatav1.json"
        //             '''
        //         }
        //     }
        // }
        // stage('Setup SSH for Jenkins') {
        //     steps {
        //         script {
        //             sh '''
        //             # Assurer que le dossier ~/.ssh existe pour Jenkins
        //             mkdir -p /var/lib/jenkins/.ssh
        //             sudo chmod 700 /var/lib/jenkins/.ssh
        //             sudo chown -R jenkins:jenkins /var/lib/jenkins/.ssh
                    
        //             # Copier la clé SSH (si elle est déjà disponible)
        //             cp /home/salma/.ssh/id_rsa /var/lib/jenkins/.ssh/ 2>/dev/null || true
        //             cp /home/salma/.ssh/id_rsa.pub /var/lib/jenkins/.ssh/ 2>/dev/null || true
                    
        //             # Fixer les permissions
        //             sudo chmod 600 /var/lib/jenkins/.ssh/id_rsa
        //             sudo chmod 644 /var/lib/jenkins/.ssh/id_rsa.pub
                    
        //             # Ajouter le serveur distant aux known_hosts pour éviter l'erreur "Host key verification failed"
        //             ssh-keyscan -H worker-vm-test >> /var/lib/jenkins/.ssh/known_hosts
        //             ssh-keyscan -H master-vm-test >> /var/lib/jenkins/.ssh/known_hosts
        //             sudo chmod 644 /var/lib/jenkins/.ssh/known_hosts
        //             '''
        //         }
        //     }
        // }
        // stage('Configure SSH (file .ssh/config)') {
        //     steps {
        //         script {
        //             sh '''
        //             # Créer le fichier config SSH si nécessaire
        //             sudo -u jenkins touch /var/lib/jenkins/.ssh/config
        
        //             # Ajouter la configuration SSH sans erreurs de syntaxe
        //             echo "Host worker-vm-test" | sudo -u jenkins tee -a /var/lib/jenkins/.ssh/config > /dev/null
        //             echo "  User salma" | sudo -u jenkins tee -a /var/lib/jenkins/.ssh/config > /dev/null
        //             echo "  IdentityFile ~/.ssh/id_rsa" | sudo -u jenkins tee -a /var/lib/jenkins/.ssh/config > /dev/null
        //             echo "  StrictHostKeyChecking no" | sudo -u jenkins tee -a /var/lib/jenkins/.ssh/config > /dev/null
        //             echo "Host master-vm-test" | sudo -u jenkins tee -a /var/lib/jenkins/.ssh/config > /dev/null
        //             echo "  User ubuntu" | sudo -u jenkins tee -a /var/lib/jenkins/.ssh/config > /dev/null
        //             echo "  IdentityFile ~/.ssh/id_rsa" | sudo -u jenkins tee -a /var/lib/jenkins/.ssh/config > /dev/null
        //             echo "  StrictHostKeyChecking no" | sudo -u jenkins tee -a /var/lib/jenkins/.ssh/config > /dev/null
        
        //             # Appliquer les permissions appropriées
        //             sudo chown jenkins:jenkins /var/lib/jenkins/.ssh/config
        //             sudo chmod 600 /var/lib/jenkins/.ssh/config
        //             '''
        //         }
        //     }
        // }

        // stage('Install Ansible') {
        //     steps {
        //         script {
        //             sh '''
        //             sudo apt update
        //             sudo apt install -y ansible
        //             '''
        //         }
        //     }
        // }

        // stage('Run Ansible Playbook') {
        //     steps {
        //         script {
        //             sh '''
        //             # Exécuter le playbook Ansible avec la clé SSH générée
        //             ansible-playbook -i hosts playbook.yml --private-key=~/.ssh/id_rsa
        //             '''
        //         }
        //     }
        // }
        stage('Install Prometheus & Grafana') {
            steps {
                sh '''
                    docker-compose -f ${WORKSPACE}/docker-compose.yml up -d
                '''
            }
        }
        stage('Install Node Exporter') {
            steps {
                script {
                    // Télécharger Node Exporter
                    sh 'wget https://github.com/prometheus/node_exporter/releases/download/v1.9.0/node_exporter-1.9.0.linux-amd64.tar.gz'

                    
                    // Extraire l'archive
                    sh 'tar xvf node_exporter-1.9.0.linux-amd64.tar.gz'
                    
                    // Déplacer le binaire dans /usr/local/bin/
                    sh 'sudo mv node_exporter-1.9.0.linux-amd64/node_exporter /usr/local/bin/'
                    
                    // Créer un service systemd pour Node Exporter
                    sh '''
                        sudo tee /etc/systemd/system/node_exporter.service > /dev/null <<EOF
                        [Unit]
                        Description=Prometheus Node Exporter
                        After=network.target

                        [Service]
                        User=nobody
                        ExecStart=/usr/local/bin/node_exporter

                        [Install]
                        WantedBy=default.target
                        EOF
                    '''

                    // Démarrer et activer le service
                    sh '''
                        sudo systemctl daemon-reload
                        sudo systemctl start node_exporter
                        sudo systemctl enable node_exporter
                    '''
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube-Server') {
                    sh '''
                        set -e
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=Infrastructure_CICD  \
                        -Dsonar.projectKey=Infrastructure_CICD
                    '''
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'SonarQube-Token'
                }
            }
        }
    }
}